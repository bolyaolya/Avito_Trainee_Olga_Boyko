//
//  NetworkService.swift
//  Avito_Trainee_Olga_Boyko
//
//  Created by –û–ª—å–≥–∞ –ë–æ–π–∫–æ on 25.08.2023.
//

import Foundation

enum NetworkError: Error {
    case invalidURL
    case invalidResponse(String)
}

struct NetworkService {
    
    //—Å–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –Ω–∞ –ø–∞—Ä—Å–∏–Ω–≥ json —Å–æ –≤—Å–µ–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏ + –¥–µ–∫–æ–¥–µ—Ä
    static func fetchData(for configuration: AppConfiguration, completion: @escaping (Result<[Products], Error>) -> Void) {
        
        let urlSession = URLSession(configuration: .default)
        guard let url = URL(string: configuration.rawValue) else {
            print("üçé –û—à–∏–±–∫–∞: \(NetworkError.invalidURL)")
            return
        }
        
        let task = urlSession.dataTask(with: url) { data, response, error in
            if let error = error {
                print("üçé –û—à–∏–±–∫–∞: \(NetworkError.invalidResponse(error.localizedDescription))")
                return
            }
            
            do {
                guard let data = data else {
                    print("üçé –î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã üçé")
                    return
                }
                
                let resp = response as! HTTPURLResponse
                let status = resp.statusCode
                guard (200...299).contains(status) else {
                    print("üçé –û—Ç–≤–µ—Ç \nüçé –ö–æ–¥ —Å—Ç–∞—Ç—É—Å–∞: \(resp.statusCode)")
                    return
                }
                
                let decoder = JSONDecoder()
                let result = try decoder.decode([String: [Products]].self, from: data)
                if let products = result["advertisements"] {
                    let _ = String(data: data, encoding: .utf8) ?? ""
                    print("üçè –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã üçè")
                    completion(.success(products))
                }
            } catch {
                print("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤: \(error)")
            }
        }
        task.resume()
    }
    
    //—Å–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –Ω–∞ –ø–∞—Ä—Å–∏–Ω–≥ json –æ–ø–∏—Å–∞–Ω–∏—è –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ + –¥–µ–∫–æ–¥–µ—Ä
    static func fetchDetailedData(from url: URL, completion: @escaping (Result<Products, Error>) -> Void) {
        
        let urlSession = URLSession(configuration: .default)
        
        let task = urlSession.dataTask(with: url) { data, response, error in
            if let error = error {
                print("üçé –û—à–∏–±–∫–∞: \(NetworkError.invalidResponse(error.localizedDescription))")
                return
            }
            
            do {
                guard let data = data else {
                    print("üçé –î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã üçé")
                    return
                }
                
                let resp = response as! HTTPURLResponse
                let status = resp.statusCode
                guard (200...299).contains(status) else {
                    print("üçé –û—Ç–≤–µ—Ç \nüçé –ö–æ–¥ —Å—Ç–∞—Ç—É—Å–∞: \(resp.statusCode)")
                    return
                }
                
                let decoder = JSONDecoder()
                do {
                    let product = try decoder.decode(Products.self, from: data)
                    completion(.success(product))
                }
            } catch {
                print("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤: \(error)")
                completion(.failure(error))
            }
        }
        task.resume()
    }
}
